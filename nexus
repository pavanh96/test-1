pipeline{
    agent any
    tools{
        maven 'maven-3.8.6'
    }
    environment{
         registry='230226440659.dkr.ecr.us-east-1.amazonaws.com/jenkins-test'
         registryCredentinal = 'aws'
         NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "44.202.185.52:8081"
        NEXUS_REPOSITORY = "jenkins-nexus"
        NEXUS_CREDENTIAL_ID = "nexus-user"
    }
    
    stages{
     stage("checkout") {
         steps{
             git branch: 'master', url: 'https://github.com/pavanh96/realtime-project-demo.git'
         }
     }  
     stage("Maven"){
         steps{
             sh "mvn clean package"
         }
     }
    stage("build & SonarQube analysis") {
            steps {
                script{
              withSonarQubeEnv(installationName: 'sonar-9' , credentialsId: 'sonar-token' ) {
                sh 'mvn clean package sonar:sonar'
              }
               timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
            }
      
            }
        }
        stage("Docker build"){
            steps{
                sh ' docker build -t jenkins-test:$BUILD_NUMBER .'
            }
        }
                stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
                }
}
}
